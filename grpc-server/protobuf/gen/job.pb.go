// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: job.proto

package gen

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SalaryRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min int32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max int32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *SalaryRange) Reset() {
	*x = SalaryRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalaryRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalaryRange) ProtoMessage() {}

func (x *SalaryRange) ProtoReflect() protoreflect.Message {
	mi := &file_job_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalaryRange.ProtoReflect.Descriptor instead.
func (*SalaryRange) Descriptor() ([]byte, []int) {
	return file_job_proto_rawDescGZIP(), []int{0}
}

func (x *SalaryRange) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *SalaryRange) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CompanyName string       `protobuf:"bytes,3,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	SalaryRange *SalaryRange `protobuf:"bytes,4,opt,name=salary_range,json=salaryRange,proto3" json:"salary_range,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_job_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_job_proto_rawDescGZIP(), []int{1}
}

func (x *Job) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Job) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Job) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *Job) GetSalaryRange() *SalaryRange {
	if x != nil {
		return x.SalaryRange
	}
	return nil
}

var File_job_proto protoreflect.FileDescriptor

var file_job_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x22, 0x31, 0x0a, 0x0b, 0x53, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0x86, 0x01, 0x0a, 0x03, 0x4a, 0x6f, 0x62,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x73, 0x61, 0x6c, 0x61, 0x72,
	0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x0b, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x32, 0xda, 0x01, 0x0a, 0x0a, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x28, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4a, 0x6f, 0x62, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4a, 0x6f, 0x62, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x0b, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4a, 0x6f, 0x62, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4a, 0x6f, 0x62, 0x22, 0x00, 0x30, 0x01, 0x12, 0x42, 0x0a, 0x0e, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x12, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12,
	0x2d, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4a, 0x6f, 0x62, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4a, 0x6f, 0x62, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x06,
	0x5a, 0x04, 0x2f, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_job_proto_rawDescOnce sync.Once
	file_job_proto_rawDescData = file_job_proto_rawDesc
)

func file_job_proto_rawDescGZIP() []byte {
	file_job_proto_rawDescOnce.Do(func() {
		file_job_proto_rawDescData = protoimpl.X.CompressGZIP(file_job_proto_rawDescData)
	})
	return file_job_proto_rawDescData
}

var file_job_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_job_proto_goTypes = []interface{}{
	(*SalaryRange)(nil), // 0: protobuf.SalaryRange
	(*Job)(nil),         // 1: protobuf.Job
}
var file_job_proto_depIdxs = []int32{
	0, // 0: protobuf.Job.salary_range:type_name -> protobuf.SalaryRange
	1, // 1: protobuf.JobService.GetJob:input_type -> protobuf.Job
	1, // 2: protobuf.JobService.CompanyJobs:input_type -> protobuf.Job
	0, // 3: protobuf.JobService.AnalysisSalary:input_type -> protobuf.SalaryRange
	1, // 4: protobuf.JobService.GetJobs:input_type -> protobuf.Job
	1, // 5: protobuf.JobService.GetJob:output_type -> protobuf.Job
	1, // 6: protobuf.JobService.CompanyJobs:output_type -> protobuf.Job
	0, // 7: protobuf.JobService.AnalysisSalary:output_type -> protobuf.SalaryRange
	1, // 8: protobuf.JobService.GetJobs:output_type -> protobuf.Job
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_job_proto_init() }
func file_job_proto_init() {
	if File_job_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_job_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalaryRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_job_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_job_proto_goTypes,
		DependencyIndexes: file_job_proto_depIdxs,
		MessageInfos:      file_job_proto_msgTypes,
	}.Build()
	File_job_proto = out.File
	file_job_proto_rawDesc = nil
	file_job_proto_goTypes = nil
	file_job_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// JobServiceClient is the client API for JobService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JobServiceClient interface {
	// 一对一
	GetJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error)
	// 一对多
	CompanyJobs(ctx context.Context, in *Job, opts ...grpc.CallOption) (JobService_CompanyJobsClient, error)
	// 多对一
	AnalysisSalary(ctx context.Context, opts ...grpc.CallOption) (JobService_AnalysisSalaryClient, error)
	// 多对多
	GetJobs(ctx context.Context, opts ...grpc.CallOption) (JobService_GetJobsClient, error)
}

type jobServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobServiceClient(cc grpc.ClientConnInterface) JobServiceClient {
	return &jobServiceClient{cc}
}

func (c *jobServiceClient) GetJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/protobuf.JobService/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) CompanyJobs(ctx context.Context, in *Job, opts ...grpc.CallOption) (JobService_CompanyJobsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JobService_serviceDesc.Streams[0], "/protobuf.JobService/CompanyJobs", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobServiceCompanyJobsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JobService_CompanyJobsClient interface {
	Recv() (*Job, error)
	grpc.ClientStream
}

type jobServiceCompanyJobsClient struct {
	grpc.ClientStream
}

func (x *jobServiceCompanyJobsClient) Recv() (*Job, error) {
	m := new(Job)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jobServiceClient) AnalysisSalary(ctx context.Context, opts ...grpc.CallOption) (JobService_AnalysisSalaryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JobService_serviceDesc.Streams[1], "/protobuf.JobService/AnalysisSalary", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobServiceAnalysisSalaryClient{stream}
	return x, nil
}

type JobService_AnalysisSalaryClient interface {
	Send(*SalaryRange) error
	CloseAndRecv() (*SalaryRange, error)
	grpc.ClientStream
}

type jobServiceAnalysisSalaryClient struct {
	grpc.ClientStream
}

func (x *jobServiceAnalysisSalaryClient) Send(m *SalaryRange) error {
	return x.ClientStream.SendMsg(m)
}

func (x *jobServiceAnalysisSalaryClient) CloseAndRecv() (*SalaryRange, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SalaryRange)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jobServiceClient) GetJobs(ctx context.Context, opts ...grpc.CallOption) (JobService_GetJobsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JobService_serviceDesc.Streams[2], "/protobuf.JobService/GetJobs", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobServiceGetJobsClient{stream}
	return x, nil
}

type JobService_GetJobsClient interface {
	Send(*Job) error
	Recv() (*Job, error)
	grpc.ClientStream
}

type jobServiceGetJobsClient struct {
	grpc.ClientStream
}

func (x *jobServiceGetJobsClient) Send(m *Job) error {
	return x.ClientStream.SendMsg(m)
}

func (x *jobServiceGetJobsClient) Recv() (*Job, error) {
	m := new(Job)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JobServiceServer is the server API for JobService service.
type JobServiceServer interface {
	// 一对一
	GetJob(context.Context, *Job) (*Job, error)
	// 一对多
	CompanyJobs(*Job, JobService_CompanyJobsServer) error
	// 多对一
	AnalysisSalary(JobService_AnalysisSalaryServer) error
	// 多对多
	GetJobs(JobService_GetJobsServer) error
}

// UnimplementedJobServiceServer can be embedded to have forward compatible implementations.
type UnimplementedJobServiceServer struct {
}

func (*UnimplementedJobServiceServer) GetJob(context.Context, *Job) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (*UnimplementedJobServiceServer) CompanyJobs(*Job, JobService_CompanyJobsServer) error {
	return status.Errorf(codes.Unimplemented, "method CompanyJobs not implemented")
}
func (*UnimplementedJobServiceServer) AnalysisSalary(JobService_AnalysisSalaryServer) error {
	return status.Errorf(codes.Unimplemented, "method AnalysisSalary not implemented")
}
func (*UnimplementedJobServiceServer) GetJobs(JobService_GetJobsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetJobs not implemented")
}

func RegisterJobServiceServer(s *grpc.Server, srv JobServiceServer) {
	s.RegisterService(&_JobService_serviceDesc, srv)
}

func _JobService_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.JobService/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).GetJob(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_CompanyJobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Job)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobServiceServer).CompanyJobs(m, &jobServiceCompanyJobsServer{stream})
}

type JobService_CompanyJobsServer interface {
	Send(*Job) error
	grpc.ServerStream
}

type jobServiceCompanyJobsServer struct {
	grpc.ServerStream
}

func (x *jobServiceCompanyJobsServer) Send(m *Job) error {
	return x.ServerStream.SendMsg(m)
}

func _JobService_AnalysisSalary_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JobServiceServer).AnalysisSalary(&jobServiceAnalysisSalaryServer{stream})
}

type JobService_AnalysisSalaryServer interface {
	SendAndClose(*SalaryRange) error
	Recv() (*SalaryRange, error)
	grpc.ServerStream
}

type jobServiceAnalysisSalaryServer struct {
	grpc.ServerStream
}

func (x *jobServiceAnalysisSalaryServer) SendAndClose(m *SalaryRange) error {
	return x.ServerStream.SendMsg(m)
}

func (x *jobServiceAnalysisSalaryServer) Recv() (*SalaryRange, error) {
	m := new(SalaryRange)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _JobService_GetJobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JobServiceServer).GetJobs(&jobServiceGetJobsServer{stream})
}

type JobService_GetJobsServer interface {
	Send(*Job) error
	Recv() (*Job, error)
	grpc.ServerStream
}

type jobServiceGetJobsServer struct {
	grpc.ServerStream
}

func (x *jobServiceGetJobsServer) Send(m *Job) error {
	return x.ServerStream.SendMsg(m)
}

func (x *jobServiceGetJobsServer) Recv() (*Job, error) {
	m := new(Job)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _JobService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.JobService",
	HandlerType: (*JobServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJob",
			Handler:    _JobService_GetJob_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CompanyJobs",
			Handler:       _JobService_CompanyJobs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AnalysisSalary",
			Handler:       _JobService_AnalysisSalary_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetJobs",
			Handler:       _JobService_GetJobs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "job.proto",
}
